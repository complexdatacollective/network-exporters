{"version":3,"file":"network-exporters.min.js","sources":["../../src/FileExportManager.js"],"sourcesContent":["const { isEmpty, groupBy } = require('lodash');\nconst uuid = require('uuid').v4;\nconst path = require('path');\nconst { EventEmitter } = require('eventemitter3');\nconst queue = require('async/queue');\nconst {\n  protocolProperty,\n} = require('@codaco/shared-consts');\nconst exportFile = require('./exportFile');\nconst {\n  insertEgoIntoSessionNetworks,\n  resequenceIds,\n  partitionNetworkByType,\n  unionOfNetworks,\n} = require('./formatters/network');\nconst {\n  verifySessionVariables,\n  getFilePrefix,\n  getFileExportListFromFormats,\n  makeOptions,\n  makeFormats,\n} = require('./utils/general');\nconst { ExportError, ErrorMessages } = require('./consts/errors/ExportError');\nconst ProgressMessages = require('./consts/ProgressMessages');\nconst UserCancelledExport = require('./consts/errors/UserCancelledExport');\nconst MockFSInterface = require('./filesystem/testFs');\nconst { SUPPORTED_FORMATS } = require('./consts/export-consts');\n\n/**\n * Interface for all data exports\n */\nclass FileExportManager {\n  constructor(fsInterface = MockFSInterface) {\n    if (!fsInterface) {\n      throw new Error('Filesystem interface is required');\n    }\n\n    this.eventEmitter = new EventEmitter();\n    this.fsInterface = fsInterface;\n  }\n\n  static getSupportedFormats() {\n    return SUPPORTED_FORMATS;\n  }\n\n  on = (...args) => {\n    this.eventEmitter.on(...args);\n  };\n\n  emit(event, payload) {\n    if (!event) {\n      // eslint-disable-next-line no-console\n      console.warn('Malformed emit.');\n      return;\n    }\n\n    this.eventEmitter.emit(event, payload);\n  }\n\n  removeAllListeners = () => {\n    this.eventEmitter.removeAllListeners();\n  };\n\n  /**\n   * Main export method. Returns a promise that resolves an to an object\n   * containing an object with run() and abort() methods that control the task.\n   *\n   * Rejections from this method are fatal errors, but errors within\n   * the run() task only fail that specific task.\n   *\n   * @param {*} sessions    collection of session objects\n   * @param {*} protocols   object keyed by protocolUID (SHA of protocol.name), where each\n   *                        protocols[protocolUID] is a complete protocol object,\n   *                        including codebook. Must contain a key for every session\n   *                        protocol in the sessions collection.\n   */\n  prepareExportJob(\n    sessions,\n    protocols,\n    userFormats = ['graphml'],\n    userOptions = {},\n  ) {\n    // Merge user supplied options with defaults\n    const options = makeOptions(userOptions);\n    const formats = makeFormats(userFormats);\n\n    const tempDirectoryName = `temp-export-${uuid()}`;\n    const tempDirectoryPath = path.join(options.tempDataPath, tempDirectoryName);\n\n    // This queue instance accepts one or more promises and limits their\n    // concurrency for better usability in consuming apps\n    // https://caolan.github.io/async/v3/docs.html#queue\n    // TODO: refactor this to use web workers\n    const q = queue((task, callback) => {\n      task()\n        .then((result) => callback(null, result))\n        .catch((error) => callback(error));\n    }, options.queueConcurrency);\n\n    // Returns an array containing each file type that needs to be created.\n    const exportFormats = getFileExportListFromFormats(\n      formats,\n      options.csvIncludeAdjacencyMatrix,\n      options.csvIncludeAttributeList,\n      options.csvIncludeEdgeList,\n    );\n\n    // Cleanup function called by abort method, after fatal errors, and after\n    // the export promise resolves.\n    const cleanUp = () => {\n      q.kill();\n      this.fsInterface.deleteDirectory(tempDirectoryPath);\n    };\n\n    // Reject if required parameters aren't provided\n    if (\n      (!sessions || isEmpty(sessions))\n      || (!protocols || isEmpty(protocols))\n    ) {\n      throw new ExportError(ErrorMessages.MissingParameters);\n    }\n\n    let cancelled = false;\n    const completedExports = [];\n    const failedExports = [];\n\n    const shouldContinue = () => !cancelled;\n\n    // Main work of the process happens here\n    const run = () => new Promise((resolveRun, rejectRun) => {\n      this.emit('begin', ProgressMessages.Begin);\n\n      this.fsInterface.createDirectory(tempDirectoryPath)\n        .then(() => {\n          if (!shouldContinue()) {\n            throw new UserCancelledExport();\n          }\n        })\n        // Insert a reference to the ego ID into all nodes and edges\n        .then(() => {\n          this.emit('update', ProgressMessages.Formatting);\n          // Insert a reference to the ego ID into all nodes and edges\n          return insertEgoIntoSessionNetworks(sessions);\n        })\n        // Resequence IDs for this export\n        .then(resequenceIds)\n        // Group sessions by protocol UUID\n        .then((sessionsWithResequencedIDs) => groupBy(sessionsWithResequencedIDs, `sessionVariables.${protocolProperty}`))\n        // Then, process the union option\n        .then((sessionsByProtocol) => {\n          if (!shouldContinue()) {\n            throw new UserCancelledExport();\n          }\n\n          if (!options.unifyNetworks) {\n            return sessionsByProtocol;\n          }\n\n          this.emit('update', ProgressMessages.Merging);\n          return unionOfNetworks(sessionsByProtocol);\n        })\n        .then((unifiedSessions) => {\n          if (!shouldContinue()) {\n            throw new UserCancelledExport();\n          }\n\n          // Create an array of promises representing each session in each export format\n          const finishedSessions = [];\n\n          // Create a variable representing the total work to be done, so we can report progress\n          const sessionExportTotal = options.unifyNetworks\n            ? Object.keys(unifiedSessions).length : sessions.length;\n\n          // Array to contain all export work to be done\n          const promisedExports = [];\n\n          Object.keys(unifiedSessions).forEach((protocolUID) => {\n            // Reject if no protocol was provided for this session\n            if (!protocols[protocolUID]) {\n              const error = `No protocol was provided for the session. Looked for protocolUID ${protocolUID}`;\n              this.emit('error', error);\n              failedExports.push(error);\n              return;\n            }\n\n            unifiedSessions[protocolUID].forEach((session) => {\n              // Skip if sessions don't have required sessionVariables\n              try {\n                if (options.unifyNetworks) {\n                  Object.values(session.sessionVariables)\n                    .forEach((sessionVariables) => {\n                      verifySessionVariables(sessionVariables);\n                    });\n                } else {\n                  verifySessionVariables(session.sessionVariables);\n                }\n              } catch (e) {\n                failedExports.push(e);\n                return;\n              }\n\n              const protocol = protocols[protocolUID];\n              const prefix = getFilePrefix(\n                session,\n                protocol,\n                options.unifyNetworks,\n              );\n\n              // Returns promise resolving to filePath for each format exported\n              exportFormats.forEach((exportFormat) => {\n                // Partitioning the network based on node and edge type so we can create\n                // an individual export file for each type\n                const partitionedNetworks = partitionNetworkByType(\n                  protocol.codebook,\n                  session,\n                  exportFormat,\n                );\n\n                partitionedNetworks.forEach((partitionedNetwork) => {\n                  const partitionedEntity = partitionedNetwork.partitionEntity;\n                  promisedExports.push(() => new Promise((resolve, reject) => {\n                    try {\n                      exportFile(\n                        prefix,\n                        partitionedEntity,\n                        exportFormat,\n                        tempDirectoryPath,\n                        partitionedNetwork,\n                        protocol.codebook,\n                        fsInterface,\n                        options,\n                      ).then((result) => {\n                        if (!finishedSessions.includes(prefix)) {\n                          // If we unified the networks, we need to iterate sessionVariables and\n                          // emit a 'session-exported' event for each sessionID\n                          if (options.unifyNetworks) {\n                            Object.values(session.sessionVariables)\n                              .forEach((sessionVariables) => {\n                                this.emit('session-exported', sessionVariables.sessionId);\n                              });\n                          } else {\n                            this.emit('session-exported', session.sessionVariables.sessionId);\n                          }\n\n                          this.emit('update', ProgressMessages.ExportSession(finishedSessions.length + 1, sessionExportTotal));\n                          finishedSessions.push(prefix);\n                        }\n                        resolve(result);\n                      }).catch((e) => reject(e));\n                    } catch (error) {\n                      this.emit('error', `Encoding ${prefix} failed: ${error.message}`);\n                      this.emit('update', ProgressMessages.ExportSession(finishedSessions.length + 1, sessionExportTotal));\n                      reject(error);\n                    }\n                  }));\n                });\n              });\n            });\n          });\n\n          q.push(promisedExports, (err, result) => {\n            if (err) {\n              failedExports.push(err);\n              return;\n            }\n            completedExports.push(result);\n          });\n\n          return new Promise((resolve, reject) => {\n            q.drain().then(resolve).catch(reject);\n          });\n        })\n        // Then, return the paths to the exported files\n        .then(() => {\n          if (!shouldContinue()) {\n            throw new UserCancelledExport();\n          }\n\n          // FatalError if there are no sessions to encode and no errors\n          if (completedExports.length === 0 && failedExports.length === 0) {\n            throw new ExportError(ErrorMessages.NothingToExport);\n          }\n\n          // If we have no files to encode (but we do have errors), finish\n          // the task here so the user can see the errors\n          if (completedExports.length === 0) {\n            this.emit('finished', ProgressMessages.Finished);\n            cleanUp();\n            resolveRun();\n            cancelled = true;\n            return Promise.resolve();\n          }\n\n          cleanUp();\n          return resolveRun(completedExports);\n        })\n        .catch((err) => {\n          cleanUp();\n          // We don't reject if this is an error from user cancelling\n          if (!(err instanceof UserCancelledExport)) {\n            this.emit('cancelled', ProgressMessages.Cancelled);\n            rejectRun(err);\n          }\n        });\n    }); // End run()\n\n    const abort = () => {\n      // eslint-disable-next-line no-console\n      console.info('Aborting file export.');\n      if (!shouldContinue()) {\n        // eslint-disable-next-line no-console\n        console.warn('This export already aborted. Cancelling abort!');\n        return;\n      }\n      cancelled = true;\n    };\n\n    return { run, abort };\n  }\n}\n\nmodule.exports = FileExportManager;\n"],"names":[],"mappings":"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"}